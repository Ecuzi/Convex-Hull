package quickhull;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

class Point implements Comparable<Point> {

    int x;
    int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Point other = (Point) obj;
        if (this.x != other.x) {
            return false;
        }
        if (this.y != other.y) {
            return false;
        }
        return true;
    }

    @Override
    public int compareTo(Point p) {
        if (this.x < p.x) {
            return -1;
        }
        if (this.x > p.x) {
            return 1;
        }
        if (this.y < p.y) {
            return -1;
        }
        if (this.y > p.y) {
            return 1;
        }
        return 0;
    }

    @Override
    public String toString() {
        return "Point{" + "x=" + x + ", y=" + y + "}\n";
    }

}

public class Quickhull {

    private HashSet<Point> convexPointsSet = new HashSet<>();

    public List<Point> getConvexPoints(List<Point> pointsList) {
        if (pointsList == null) {
            System.out.println("Points List is null.");
            return null;
        }
        if (pointsList.size() <= 2) {
            System.out.println("QuickHull is not possibe for " + pointsList.size() + " number of points.");
            return null;
        }
        Point min_x = pointsList.get(0);
        Point max_x = pointsList.get(0);
        for (Point p : pointsList) {
            if (p.x < min_x.x) {
                min_x = p;
            }
            if (p.x > max_x.x) {
                max_x = p;
            }

        }
        quickHull(pointsList, min_x, max_x, 1);
        quickHull(pointsList, min_x, max_x, -1);
        List<Point> convexList = new ArrayList<>(convexPointsSet);
        Collections.sort(convexList);
        return convexList;

    }

    public void quickHull(List<Point> pointsList, Point line1, Point line2, int side) {
        int farthestPointIndex = -1;
        int maxDistance = Integer.MIN_VALUE;

        for (int i = 0; i < pointsList.size(); i++) {
            int curDistance = distanceFromLine(pointsList.get(i), line1, line2);
            if (isAboveTheLine(pointsList.get(i), line1, line2) == side && curDistance > maxDistance) {
                farthestPointIndex = i;
                maxDistance = curDistance;
            }
        }

        if (farthestPointIndex == -1) {
            convexPointsSet.add(line1);
            convexPointsSet.add(line2);
            return;
        }

        quickHull(pointsList, pointsList.get(farthestPointIndex), line1, -1 * isAboveTheLine(pointsList.get(farthestPointIndex), line1, line2));
        quickHull(pointsList, pointsList.get(farthestPointIndex), line2, -1 * isAboveTheLine(pointsList.get(farthestPointIndex), line2, line1));
    }

    public int distanceFromLine(Point p, Point line1, Point line2) {
        int distance = Math.abs((p.y - line1.y) * (line2.x - line1.x)
                - (line2.y - line1.y) * (p.x - line1.x));
        return distance;
    }

    public int isAboveTheLine(Point p, Point line1, Point line2) {
        int flag = (p.y - line1.y) * (line2.x - line1.x)
                - (line2.y - line1.y) * (p.x - line1.x);

        if (flag > 0) {
            return 1;
        }
        if (flag < 0) {
            return -1;
        }
        return 0;
    }

    public List<Point> autoGeneratedPoints(int n) {
        List<Point> pointsList = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            int x = (int) (Math.random() * 100);
            if (x % 3 == 0) {
                x = x * -1;
            }
            int y = (int) (Math.random() * 100);
            if (y % 3 == 0) {
                y = y * -1;
            }
            pointsList.add(new Point(x, y));
        }
        return pointsList;

    }

    public static void main(String[] args) {
//      Test Array
//        ArrayList<Point> pointsList = new ArrayList<>();
//
//        Test case 01
//        pointsList.add(new Point(0, 3));
//        pointsList.add(new Point(1, 1));
//        pointsList.add(new Point(2, 2));
//        pointsList.add(new Point(4, 4));
//        pointsList.add(new Point(0, 0));
//        pointsList.add(new Point(1, 2));
//        pointsList.add(new Point(3, 1));
//        pointsList.add(new Point(3, 3));
//
//      Test case 02
//        pointsList.add(new Point(0, 0));
//        pointsList.add(new Point(0, 4));
//        pointsList.add(new Point(-4, 0));
//        pointsList.add(new Point(5, 0));
//        pointsList.add(new Point(0, -6));
//        pointsList.add(new Point(1, 0));
        Quickhull obj = new Quickhull();

        List<Point> pointsList = obj.autoGeneratedPoints(10);
        System.out.println("Auto generated points: " + Arrays.toString(pointsList.toArray()));

        List<Point> convexPoints = obj.getConvexPoints(pointsList);
//
        System.out.println("Convex Hull Points: " + Arrays.toString(convexPoints.toArray()));

    }

}

